import { SingleCellExperiment } from "bioconductor";
import { H5Group, H5DataSet } from "./h5.js";
import { readObject, saveObject } from "./general.js";
import { readSummarizedExperiment, saveSummarizedExperiment } from "./SummarizedExperiment.js"; 

/**
 * A single-cell experiment.
 * @external SingleCellExperiment 
 * @see {@link https://ltla.github.io/bioconductor.js/SingleCellExperiment.html}
 */

/**
 * @param {string} path - Path to the takane-formatted object directory containing the {@link external:SingleCellExperiment SingleCellExperiment}.
 * @param {object} metadata - Takane object metadata, typically generated by calling {@linkcode readObjectFile} on `path`.
 * @param {object} globals - Object containing `fs`, an object satisfying the {@link GlobalFsInterface}; and `h5`, an object satisfying the {@link GlobalH5Interface}.
 * @param {object} [options={}] - Further options.
 *
 * @return {external:SingleCellExperiment} The single-cell experiment object.
 * @async
 */
export async function readSingleCellExperiment(path, metadata, globals, options = {}) {
    let se = await readSummarizedExperiment(path, metadata, globals, options);

    let all_assays = {};
    const assay_names = se.assayNames();
    for (const aname of assay_names) {
        all_assays[aname] = se.assay(aname);
    }

    let sce = new SingleCellExperiment(
        all_assays,
        {
            assayOrder: se.assayNames(),
            rowData: se.rowData(),
            columnData: se.columnData(),
            rowNames: se.rowNames(),
            columnNames: se.columnNames(),
            metadata: se.metadata(),
        }
    );

    const rdpath = path + "/reduced_dimensions/names.json";
    if (await globals.fs.exists(rdpath)) {
        let names_contents = await globals.fs.get(rdpath, { asBuffer: true });
        const dec = new TextDecoder;
        const reddim_names = JSON.parse(dec.decode(names_contents));
        for (const [i, rname] of Object.entries(reddim_names)) {
            sce.$setReducedDimension(rname, await readObject(path + "/reduced_dimensions/" + String(i), null, globals, options));
        }
    }

    const aepath = path + "/alternative_experiments/names.json";
    if (await globals.fs.exists(aepath)) {
        let names_contents = await globals.fs.get(aepath, { asBuffer: true });
        const dec = new TextDecoder;
        const altexp_names = JSON.parse(dec.decode(names_contents));
        for (const [i, aname] of Object.entries(altexp_names)) {
            sce.$setAlternativeExperiment(aname, await readObject(path + "/alternative_experiments/" + String(i), null, globals, options));
        }
    }

    return sce;
}

/**
 * @param {external:SingleCellExperiment} x - The single-cell experiment.
 * @param {string} path - Path to the directory in which to save `x`.
 * @param {object} globals - Object containing `fs`, an object satisfying the {@link GlobalFsInterface}; and `h5`, an object satisfying the {@link GlobalH5Interface}.
 * @param {object} [options={}] - Further options.
 *
 * @return `x` is stored at `path`.
 * @async
 */
export async function saveSingleCellExperiment(x, path, globals, options = {}) {
    await saveSummarizedExperiment(x, path, globals, options);

    let object_contents = globals.fs.get(path + "/OBJECT", { asBuffer: true });
    const dec = new TextDecoder;
    const existing = JSON.parse(dec.decode(object_contents));
    existing.type = "single_cell_experiment";
    existing.ranged_summarized_experiment = { "version": "1.0" };
    existing.single_cell_experiment = { "version": "1.0" };
    await globals.fs.write(path + "/OBJECT", JSON.stringify(existing));

    const reddim_names = x.reducedDimensionNames();
    if (reddim_names.length > 0) {
        await globals.fs.mkdir(path + "/reduced_dimensions");
        await globals.fs.write(path + "/reduced_dimensions/names.json", JSON.stringify(reddim_names));
        for (const [i, rname] of Object.entries(reddim_names)) {
            await saveObject(x.reducedDimension(rname), path + "/reduced_dimensions/" + String(i), globals, options);
        }
    }

    const altexp_names = x.alternativeExperimentNames();
    if (altexp_names.length > 0) {
        await globals.fs.mkdir(path + "/alternative_experiments");
        await globals.fs.write(path + "/alternative_experiments/names.json", JSON.stringify(altexp_names));
        for (const [i, aname] of Object.entries(altexp_names)) {
            await saveObject(x.alternativeExperiment(aname), path + "/alternative_experiments/" + String(i), globals, options);
        }
    }
}
